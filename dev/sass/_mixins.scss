//-------------------------MIXINS----------------------------------

@mixin clearfix {
  &:before,
  &:after {
    content: '';
    display: table;
  }
  &:after {
    clear: both;
  }
}

@mixin ems-pixels($property, $emValues...) {
  $pxs: ();
  $ems: ();

  @each $val in $emValues {
    $pxs: append($pxs, $val+px, space);
    $ems: append($ems, $val+rem, space);
  }

  #{$property}: $pxs;
  #{$property}: $ems;
}

@mixin font ($fz, $fonts, $colors){
  font-size: $fz;
  color: $colors;
  font-family: $fonts;
}


%button {
  display: inline-block;
  padding: .8em 2em;
  background-color: $brand-color;
  width: 180px;
  border-radius: $largeBorderRadius;
  cursor: pointer;
  text-align: center;
  margin: 5% 0;

  a {
    color: $white;
    text-decoration: none;
    text-transform: uppercase;
  }
}

@mixin padding-layout(){
  padding: {
    bottom: 10px;
    right: 10%;
    top: 10px;
  }
}

@mixin fullWidth-layout() {
  padding-left: 0;
  padding-right: 0;
  width: 100%;
}

%list {
  list-style-type: none;
  color: $grey-color;
  font-size: $mainFontSize;
  font-family: $main-font;
}

@mixin position($type, $top, $right, $bottom, $left) {
  top: $top;
  bottom: $bottom;
  left: $left;
  right: $right;
  position: $type;
}

@mixin flex($wrap, $direction, $row-align, $vertical-align){
  display: flex;
  flex-wrap: $wrap;
  flex-direction: $direction;
  align-items: $vertical-align;
  justify-content: $row-align;
}

@mixin flex-element($val, $fg: 1, $fs: 0) {
  flex: {
    grow: $fg;
    shrink: $fs;
    basis: $val;
  }
}

@mixin inputs($radius...) {
  border: none;
  background-color: rgba(61, 61, 61, 0.2); //TODO
  color: $white;
  font-family: $main-font;
  font-size: $smallFontSize;
  padding: 5px;
  margin: 5px 0;
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
  border-radius: $radius;
}

@mixin bordered(){
  border: {
    left: 1px solid $brand-color;
    bottom: 1px solid $brand-color;
    radius: 0;
  }
}

@mixin transition($args...) {
  -webkit-transition: $args;
  -moz-transition: $args;
  -o-transition: $args;
  transition: $args;
}

%first-column {
  break-after: column;
  -moz-break-after: column;
  -webkit-column-break-after: column;
  page-break-after: column;
}

@mixin Columns($columns, $gap) {
  columns: $columns;
  column-gap: $gap + em;
  -moz-column-rule: 1em solid transparent;
  column-rule: 1em solid transparent;

  @extend %first-column;
}

@mixin sprite ($left: 0, $top: 0){
  content: '';
  background-image: url('../img/spritesheet.png');
  background-repeat: no-repeat;
  display: inline-block;
  height: 15px;
  width: 15px;
  background-position: $left + px $top + px;
}

@mixin media_mobile($from: 320, $to: 480, $orientation: false) {
  @media screen and (min-width: $from + px) and (max-width: $to + px) {@content;};
}
@mixin media_handheld($from: 321, $to: 768, $orientation: false) {
  @media screen and (min-width: $from + px) and (max-width: $to + px) {@content;};
}
@mixin media_desktop($from: 769, $to: 1400) {
  @media screen and (min-width: $from + px) and (max-width: $to + px) {@content;};
}
@mixin media_widescreen($from: 1441) {
  @media screen and (min-width: $from + px) {@content;};
}
@mixin hdpi($ratio: 1.3) {
  @media only screen and (-webkit-min-device-pixel-ratio: $ratio),
  only screen and (min-resolution: #{round($ratio*96)}dpi) {
    @content;
  }
}

//https://habrahabr.ru/post/156645/
//https://github.com/paranoida/sass-mediaqueries/blob/master/_media-queries.scss




